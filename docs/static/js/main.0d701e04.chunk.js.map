{"version":3,"sources":["reportWebVitals.js","component/GeneraQRCode.js","component/QRScann.js","component/ui/Navbar.js","routers/DashBoardRoute.js","routers/AppRouter.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GeneraQRCode","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","classes","useStyles","qrRef","useRef","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","conatiner","Card","to","title","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","btn","variant","color","onClick","href","download","src","alt","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","legacyMode","makeStyles","theme","marginTop","display","justifyContent","alignItems","background","padding","marginBottom","QRScann","scanResultWebCam","setScanResultWebCam","Navbar","activeClassName","exact","DashBoardRoute","path","component","AppRouter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d701e04.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState, useRef} from 'react';\r\nimport {Container, Card, CardContent, makeStyles, Grid, TextField, Button} from '@material-ui/core';\r\nimport QRCode from 'qrcode';\r\nimport QrReader from 'react-qr-reader';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const GeneraQRCode = () => {\r\n\r\n    const [text, setText] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [scanResultFile, setScanResultFile] = useState('');\r\n    const classes = useStyles();\r\n    const qrRef = useRef(null);\r\n  \r\n  \r\n    const generateQrCode = async () => {\r\n        try {\r\n            const response = await QRCode.toDataURL(text);\r\n            setImageUrl(response);\r\n        }catch (error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n    const handleErrorFile = (error) => {\r\n      console.log(error);\r\n    }\r\n    const handleScanFile = (result) => {\r\n        if (result) {\r\n            setScanResultFile(result);\r\n        }\r\n    }\r\n    const onScanFile = () => {\r\n      qrRef.current.openImageDialog();\r\n    }\r\n\r\n    return (\r\n      <Container className={classes.conatiner}>\r\n            <Card>\r\n            <Link to={`./`}>\r\n                        <h3>Volver</h3>\r\n                        <h2 className={classes.title}>Genera Codigo QR & Haga Scan QR Code desde archivo</h2>\r\n                    </Link>\r\n                <CardContent>\r\n\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                            <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)}/>\r\n                            <Button className={classes.btn} variant=\"contained\" \r\n                              color=\"primary\" onClick={() => generateQrCode()}>Generar QR</Button>\r\n                              <br/>\r\n                              <br/>\r\n                              <br/>\r\n                              {imageUrl ? (\r\n                                <a href={imageUrl} download>\r\n                                    <img src={imageUrl} alt=\"img\"/>\r\n                                </a>) : null}\r\n                        </Grid>\r\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                          <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Desde Archivo</Button>\r\n                          <QrReader\r\n                            ref={qrRef}\r\n                            delay={300}\r\n                            style={{width: '100%'}}\r\n                            onError={handleErrorFile}\r\n                            onScan={handleScanFile}\r\n                            legacyMode\r\n                          />\r\n                          <h3>Resultado Obtenido: {scanResultFile}</h3>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n      </Container>\r\n    );\r\n\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    conatiner: {\r\n      marginTop: 10\r\n    },\r\n    title: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems:  'center',\r\n      background: '#3f51b5',\r\n      color: '#fff',\r\n      padding: 20\r\n    },\r\n    btn : {\r\n      marginTop: 10,\r\n      marginBottom: 20\r\n    }\r\n}));\r\n\r\n","import React, {useState} from 'react';\r\nimport {Container, Card, CardContent, makeStyles, Grid} from '@material-ui/core';\r\nimport QrReader from 'react-qr-reader';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport const QRScann = () => {\r\n\r\n    const [scanResultWebCam, setScanResultWebCam] =  useState('');\r\n    const classes = useStyles();\r\n \r\n    const handleErrorWebCam = (error) => {\r\n      console.log(error);\r\n    }\r\n    const handleScanWebCam = (result) => {\r\n      if (result){\r\n          setScanResultWebCam(result);\r\n      }\r\n    }\r\n    return (\r\n      <Container className={classes.conatiner}>\r\n            <Card>\r\n                <Link to={`./`}>\r\n                    <h2 className={classes.title}>Apuntar la etiqueta sobre la camara y espere el resultado</h2>\r\n                </Link>\r\n                <CardContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                           <h3>Ajuste QR en el recuadro</h3>\r\n                           <QrReader\r\n                              delay={300}\r\n                              style={{width: '100%'}}\r\n                              onError={handleErrorWebCam}\r\n                              onScan={handleScanWebCam}\r\n                           />\r\n                           <h3>Resultado de la WebCam: {scanResultWebCam}</h3>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n      </Container>\r\n    );\r\n  \r\n\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    conatiner: {\r\n      marginTop: 10\r\n    },\r\n    title: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems:  'center',\r\n      background: '#3f51b5',\r\n      color: '#fff',\r\n      padding: 20\r\n    },\r\n    btn : {\r\n      marginTop: 10,\r\n      marginBottom: 20\r\n    }\r\n}));\r\n","import React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n            \r\n            <Link \r\n                className=\"navbar-brand\" \r\n                to=\"/\"\r\n            >\r\n                Asociaciones\r\n            </Link>\r\n\r\n            <div className=\"navbar-collapse\">\r\n                <div className=\"navbar-nav\">\r\n\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/qr\"\r\n                    >\r\n                        Lector QR Camera\r\n                    </NavLink>\r\n\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/genera\"\r\n                    >\r\n                        Genera QR Code\r\n                    </NavLink>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/login\"\r\n                    >\r\n                        Logout\r\n                    </NavLink>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Navbar } from '../component/ui/Navbar'\r\nimport { Switch, Router, Redirect } from 'react-router-dom'\r\nimport { QRScann } from '../component/QRScann'\r\nimport { GeneraQRCode } from '../component/GeneraQRCode'\r\n\r\n//import { createBrowserHistory } from \"history\";\r\n\r\nexport const DashBoardRoute = () => {\r\n\r\n  // const customHistory = createBrowserHistory();\r\n\r\n    return (\r\n        <>\r\n          <Navbar />\r\n\r\n          <div>\r\n            <Switch>\r\n                <Router exact path=\"/qr\" component={ QRScann } />\r\n                <Router exact path=\"/genera\" component={ GeneraQRCode } />\r\n                \r\n                <Redirect to=\"/\" />\r\n                \r\n            </Switch>\r\n          </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n    } from \"react-router-dom\";\r\nimport { GeneraQRCode } from '../component/GeneraQRCode';\r\nimport { QRScann } from '../component/QRScann';\r\nimport { DashBoardRoute } from './DashBoardRoute';\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                        <Route exact path =\"/qr\" component ={ QRScann } />\r\n                        <Route exact path =\"/genera\" component ={ GeneraQRCode } />\r\n                        \r\n                        <Route path =\"/\" component ={ DashBoardRoute } />\r\n                        \r\n                        <Redirect to=\"/\" />\r\n                    </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppRouter } from './routers/AppRouter';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <AppRouter />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}